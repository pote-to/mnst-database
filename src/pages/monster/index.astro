---

const alldata = await Astro.glob('../../../public/data/monster/*.json');

import Layout from '../../layouts/Layout.astro';
import DataCard from '../../components/DataCard.astro';
---

<Layout title=`データ一覧`>
	<main>
        <h1>データ一覧</h1>

		<div class="data">
			<div class="search">
				<input type="search" placeholder="名前で検索">
			</div>
			<ul class="datalist">
				{alldata.sort((a,b)=>{return (b.number - a.number)}).map((data) => (
					<DataCard 
						number={data.number}
						name={data.name}
					/>
				))}
			</ul>
		</div>
		<script is:inline data-searchjson={JSON.stringify(alldata.map((obj)=>{return {number: obj.number, name: obj.name}}))}></script>
		<script is:inline>
			function renderMonsterDataList() {
				const data = JSON.parse(document.querySelector("script[data-searchjson]").dataset.searchjson);
				const searchbox = document.querySelector('.search input[type="search"]');
				const query = String(searchbox.value);
				const result = data.filter((obj) => ~obj.name.indexOf(query));
				const resultnumberlist = result.map((obj) => obj.number);
				// View
				document.querySelectorAll(".data-card").forEach((elem) => {
					if(resultnumberlist.includes(Number(elem.dataset.id))){
						elem.classList.remove("is-hidden");
					}else{
						elem.classList.add("is-hidden");
					}
				});
			}
			function syncQueryParamsToInput() {
				const query = (new URLSearchParams(location.search)).get("q");
				const searchbox = document.querySelector('.search input[type="search"]');
				searchbox.value = query;
			}
		</script>
		<script is:inline>
			document.addEventListener("DOMContentLoaded", () => {
				const searchbox = document.querySelector('.search input[type="search"]');
				searchbox.addEventListener("change", () => {
					// History
					const newQuery = String(searchbox.value);
					const queryParams = new URLSearchParams(location.search);
					if (!(queryParams.has("q", newQuery))) {
						history.pushState({q: newQuery}, null, `?q=${newQuery}`);
						console.log(`pushstate : "${newQuery}"`);
					}
					// Rendering
					renderMonsterDataList();
				});
				syncQueryParamsToInput();
				renderMonsterDataList();
			});
			window.addEventListener("popstate", (e) => {
				console.log(`popstate : "${e.state?.q}"`);
				syncQueryParamsToInput();
				renderMonsterDataList();
			});
			window.addEventListener("pageshow", (e) => {
				console.log(`is-persisted : ${e.persisted.toString()} (${Date.now()})`);
			});
		</script>
	</main>
</Layout>

<style>
	.data{
		padding-inline: 32px;
	}
	.search input[type="search"]{
		display: block;
		width: 100%;
		font-size: 1em;
		padding: 4px;
	}
	.datalist{
		padding-inline: 0;
		display: grid;
		grid-template-columns: 1fr;
		gap: 1em;
	}
</style>